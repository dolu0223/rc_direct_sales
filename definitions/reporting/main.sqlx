config {
  type: "table",
  schema: "reporting",
  description: "MAIN Data Elements"
}

SELECT 
'TD-SAP-P08' AS SOURCE_SYSTEM_CODE
, COALESCE(extract (YEAR from AMT.INVOICE_DATE), 1900) AS CALENDAR_YEAR
, extract (month from AMT.INVOICE_DATE) AS CALENDAR_MONTH
, 'GB' AS COUNTRY_CODE
, COALESCE(NULLIF(CUST_SLS_DATA.sls_grp_cd, ''), ' ')	AS POSITION_LEVEL_1_CODE --2/24/2021
--, COALESCE(AMT.OPERATIONAL_ACCOUNT_IDENTIFIER_1, ' ')	AS OPERATIONAL_ACCOUNT_IDENTIFIER_1 --GAP TO BE FILLED
, 'SAP-X08-C'	AS OPERATIONAL_ACCOUNT_IDENTIFIER_1_SOURCE_SYSTEM_CODE
, COALESCE(AMT.OPERATIONAL_ACCOUNT_IDENTIFIER_1_CLASSIFICATION_CODE, ' ')	AS OPERATIONAL_ACCOUNT_IDENTIFIER_1_CLASSIFICATION_CODE
, 'D'	AS DIRECT_INDIRECT_INDICATOR
, AMT.INVOICE_DATE AS INVOICE_DATE
, COALESCE(AMT.MATERIAL_NUMBER, ' ')	AS MATERIAL_NUMBER
, MIN(COALESCE(SALE.FIRST_ORDER_DATE, AMT.INVOICE_DATE)) AS FIRST_ORDER_DATE
, SEAS.CROP_YEAR AS MARKET_YEAR
, COALESCE(SEAS.SEASON_CODE, ' ')	AS SEASON_CODE
, SEAS.SEASON_NAME AS SEASON_NAME
, 'Crop Science' AS DIVISION_NAME
, MTRL.BUSINESS_GROUP_NAME AS BUSINESS_GROUP_NAME
, MTRL.LINE_OF_BUSINESS_NAME AS LINE_OF_BUSINESS_NAME
, MTRL.PRODUCT_GROUP_NAME AS PRODUCT_GROUP_NAME
, MTRL.PRODUCT_BRAND_NAME AS PRODUCT_BRAND_NAME
, MTRL.PRODUCT_NAME AS PRODUCT_NAME
--, ROUND(SUM
--  (
--    CONVERT_CURRENCY
--    (
--      SOURCE_UNIT => AMT.LOCAL_CURRENCY_CODE
--      , TARGET_UNIT => 'GBP'
--      , CONVERSION_TYPE => 'P'
--      , REFERENCE_DATE => TO_DATE(YEAR(AMT.INVOICE_DATE) || '01' || '01')
--      , AMOUNT => AMT.GROSS_SALES_AMOUNT_LOCAL
--      , SCHEMA => 'CORE'
--      , CLIENT => '430'
--      , ERROR_HANDLING => 'set to null'
--      , CONFIGURATION_TABLE=> 'CORE.RAW::DV_CURRENCY_EXCHANGE_RATE_TYPES_P08'
--      , PRECISIONS_TABLE=> 'CORE.RAW::DV_CURRENCY_DECIMAL_PLACES_P08'
--      , RATES_TABLE=> 'CORE.RAW::DV_CURRENCY_EXCHANGE_RATES_P08'
--      , PREFACTORS_TABLE=> 'CORE.RAW::DV_CURRENCY_CONVERSION_FACTORS_P08'
--    )
--
--  ), 2)	AS GROSS_SALES_AMOUNT_LOCAL
, 'GBP' AS GROSS_SALES_AMOUNT_LOCAL_CURRENCY_CODE
--, ROUND(SUM
--  (
--    CONVERT_CURRENCY
--    (
--      SOURCE_UNIT => AMT.LOCAL_CURRENCY_CODE
--      , TARGET_UNIT => 'EUR'
--      , CONVERSION_TYPE => 'P'
--      , REFERENCE_DATE => TO_DATE(YEAR(AMT.INVOICE_DATE) || '01' || '01')
--      , AMOUNT => AMT.GROSS_SALES_AMOUNT_LOCAL
--      , SCHEMA => 'CORE'
--      , CLIENT => '430'
--      , ERROR_HANDLING => 'set to null'
--      , CONFIGURATION_TABLE=> 'CORE.RAW::DV_CURRENCY_EXCHANGE_RATE_TYPES_P08'
--      , PRECISIONS_TABLE=> 'CORE.RAW::DV_CURRENCY_DECIMAL_PLACES_P08'
--      , RATES_TABLE=> 'CORE.RAW::DV_CURRENCY_EXCHANGE_RATES_P08'
--      , PREFACTORS_TABLE=> 'CORE.RAW::DV_CURRENCY_CONVERSION_FACTORS_P08'
--    )
--
--  ),2) AS GROSS_SALES_AMOUNT_GLOBAL
, 'EUR' AS GROSS_SALES_AMOUNT_GLOBAL_CURRENCY_CODE
--, ROUND(SUM
--  (
--    CONVERT_CURRENCY
--    (
--      SOURCE_UNIT => AMT.LOCAL_CURRENCY_CODE
--      , TARGET_UNIT => 'GBP'
--      , CONVERSION_TYPE => 'P'
--      , REFERENCE_DATE => TO_DATE(YEAR(AMT.INVOICE_DATE) || '01' || '01')
--      , AMOUNT => AMT.NET_SALES_AMOUNT_LOCAL
--      , SCHEMA => 'CORE'
--      , CLIENT => '430'
--      , ERROR_HANDLING => 'set to null'
--      , CONFIGURATION_TABLE=> 'CORE.RAW::DV_CURRENCY_EXCHANGE_RATE_TYPES_P08'
--      , PRECISIONS_TABLE=> 'CORE.RAW::DV_CURRENCY_DECIMAL_PLACES_P08'
--      , RATES_TABLE=> 'CORE.RAW::DV_CURRENCY_EXCHANGE_RATES_P08'
--      , PREFACTORS_TABLE=> 'CORE.RAW::DV_CURRENCY_CONVERSION_FACTORS_P08'
--    )
--
--  ),2) AS NET_SALES_AMOUNT_LOCAL
, 'GPB' AS NET_SALES_AMOUNT_LOCAL_CURRENCY_CODE
--, ROUND(SUM
--  (
--    CONVERT_CURRENCY
--    (
--      SOURCE_UNIT => AMT.LOCAL_CURRENCY_CODE
--      , TARGET_UNIT => 'EUR'
--      , CONVERSION_TYPE => 'P'
--      , REFERENCE_DATE => TO_DATE(YEAR(AMT.INVOICE_DATE) || '01' || '01')
--      , AMOUNT => AMT.NET_SALES_AMOUNT_LOCAL
--      , SCHEMA => 'CORE'
--      , CLIENT => '430'
--      , ERROR_HANDLING => 'set to null'
--      , CONFIGURATION_TABLE=> 'CORE.RAW::DV_CURRENCY_EXCHANGE_RATE_TYPES_P08'
--      , PRECISIONS_TABLE=> 'CORE.RAW::DV_CURRENCY_DECIMAL_PLACES_P08'
--      , RATES_TABLE=> 'CORE.RAW::DV_CURRENCY_EXCHANGE_RATES_P08'
--      , PREFACTORS_TABLE=> 'CORE.RAW::DV_CURRENCY_CONVERSION_FACTORS_P08'
--    )
--
--  ),2) AS NET_SALES_AMOUNT_GLOBAL
, 'EUR' AS NET_SALES_AMOUNT_GLOBAL_CURRENCY_CODE
, NET.NET_SALES_QUANTITY_LOCAL AS NET_SALES_QUANTITY_LOCAL --2/25/2021
, 'ESU' AS NET_SALES_QUANTITY_LOCAL_UNIT_OF_MEASURE_CODE
, NET.NET_SALES_QUANTITY_GLOBAL AS NET_SALES_QUANTITY_GLOBAL --2/25/2021
, 'SSU' AS NET_SALES_QUANTITY_GLOBAL_UNIT_OF_MEASURE_CODE
--, ROUND(SUM
--  (
--    CONVERT_CURRENCY
--        (
--      SOURCE_UNIT => COALESCE(GGPPU.AVERAGE_GLOBAL_AMOUNT_CURRENCY_CODE,GGPPU_ALT.AVERAGE_GLOBAL_AMOUNT_CURRENCY_CODE),
--          TARGET_UNIT => 'GBP',
--          CONVERSION_TYPE => 'P',
--          REFERENCE_DATE => TO_DATE(YEAR(AMT.INVOICE_DATE) || '01' || '01'),
--      AMOUNT => NET.NET_SALES_QUANTITY_GLOBAL * COALESCE(GGPPU.AVERAGE_GLOBAL_NET_SALES_PER_UNIT_AMOUNT,GGPPU_ALT.AVERAGE_GLOBAL_NET_SALES_PER_UNIT_AMOUNT), --3/2/2021
--          SCHEMA => 'CORE' ,
--          CLIENT => '430' ,
--          ERROR_HANDLING => 'set to null' ,
--          CONFIGURATION_TABLE=> 'CORE.RAW::DV_CURRENCY_EXCHANGE_RATE_TYPES_P08' ,
--          PRECISIONS_TABLE=> 'CORE.RAW::DV_CURRENCY_DECIMAL_PLACES_P08' ,
--          RATES_TABLE=> 'CORE.RAW::DV_CURRENCY_EXCHANGE_RATES_P08' ,
--          PREFACTORS_TABLE=> 'CORE.RAW::DV_CURRENCY_CONVERSION_FACTORS_P08'
--        )
--  ),2) AS ESTIMATED_SALES_AMOUNT_LOCAL
, 'GBP' AS ESTIMATED_SALES_AMOUNT_LOCAL_CURRENCY_CODE
, ROUND(SUM(NET.NET_SALES_QUANTITY_GLOBAL * COALESCE(GGPPU.AVERAGE_GLOBAL_NET_SALES_PER_UNIT_AMOUNT,GGPPU_ALT.AVERAGE_GLOBAL_NET_SALES_PER_UNIT_AMOUNT)),2) AS ESTIMATED_SALES_AMOUNT_GLOBAL --3/2/2021
, COALESCE(GGPPU.AVERAGE_GLOBAL_AMOUNT_CURRENCY_CODE,GGPPU_ALT.AVERAGE_GLOBAL_AMOUNT_CURRENCY_CODE) AS ESTIMATED_SALES_AMOUNT_GLOBAL_CURRENCY_CODE
--, ROUND(SUM
--  (
--      CONVERT_CURRENCY
--      (
--        SOURCE_UNIT => COALESCE(GGPPU.AVERAGE_GLOBAL_AMOUNT_CURRENCY_CODE,GGPPU_ALT.AVERAGE_GLOBAL_AMOUNT_CURRENCY_CODE),
--      TARGET_UNIT => 'GBP',
--      CONVERSION_TYPE => 'P' ,
--      REFERENCE_DATE => TO_DATE(YEAR(AMT.INVOICE_DATE) || '0101'),
--      AMOUNT => NET.NET_SALES_QUANTITY_GLOBAL * COALESCE(GGPPU.AVERAGE_GLOBAL_GROSS_PROFIT_PER_UNIT_AMOUNT,GGPPU_ALT.AVERAGE_GLOBAL_GROSS_PROFIT_PER_UNIT_AMOUNT), --3/2/2021
--      SCHEMA => 'CORE' ,
--      CLIENT => '430' ,
--      ERROR_HANDLING => 'set to null' ,
--      CONFIGURATION_TABLE=> 'CORE.RAW::DV_CURRENCY_EXCHANGE_RATE_TYPES_P08' ,
--      PRECISIONS_TABLE=> 'CORE.RAW::DV_CURRENCY_DECIMAL_PLACES_P08' ,
--      RATES_TABLE=> 'CORE.RAW::DV_CURRENCY_EXCHANGE_RATES_P08' ,
--      PREFACTORS_TABLE=> 'CORE.RAW::DV_CURRENCY_CONVERSION_FACTORS_P08'
--    )
--  ),2) AS ESTIMATED_GROSS_PROFIT_AMOUNT_LOCAL
, 'GBP' AS ESTIMATED_GROSS_PROFIT_AMOUNT_LOCAL_CURRENCY_CODE
, ROUND(SUM(NET.NET_SALES_QUANTITY_GLOBAL * COALESCE(GGPPU.AVERAGE_GLOBAL_GROSS_PROFIT_PER_UNIT_AMOUNT,GGPPU_ALT.AVERAGE_GLOBAL_GROSS_PROFIT_PER_UNIT_AMOUNT)),2) AS ESTIMATED_GROSS_PROFIT_AMOUNT_GLOBAL --3/2/2021
, COALESCE(GGPPU.AVERAGE_GLOBAL_AMOUNT_CURRENCY_CODE,GGPPU_ALT.AVERAGE_GLOBAL_AMOUNT_CURRENCY_CODE)	AS ESTIMATED_GROSS_PROFIT_AMOUNT_GLOBAL_CURRENCY_CODE
, ROUND(SUM(OOQ.OPEN_ORDER_QUANTITY_LOCAL),2) AS OPEN_ORDER_QUANTITY_LOCAL --2/25/2021
, 'ESU' AS OPEN_ORDER_QUANTITY_LOCAL_UNIT_OF_MEASURE_CODE
, ROUND(SUM(OOQ.OPEN_ORDER_QUANTITY_GLOBAL),2) AS OPEN_ORDER_QUANTITY_GLOBAL --2/25/2021
, 'SSU' AS OPEN_ORDER_QUANTITY_GLOBAL_UNIT_OF_MEASURE_CODE
, ROUND(SUM(SALE.RETURN_QUANTITY_LOCAL),2) AS RETURN_QUANTITY_LOCAL --2/25/2021
, 'ESU' AS RETURN_QUANTITY_LOCAL_UNIT_OF_MEASURE_CODE
, ROUND(SUM(SALE.RETURN_QUANTITY_GLOBAL),2) AS RETURN_QUANTITY_GLOBAL --2/25/2021
, 'SSU' AS RETURN_QUANTITY_GLOBAL_UNIT_OF_MEASURE_CODE
, ROUND(SUM(SHIP.SHIPPED_QUANTITY_LOCAL),2) AS SHIPPED_QUANTITY_LOCAL
, 'ESU' AS SHIPPED_QUANTITY_LOCAL_UNIT_OF_MEASURE_CODE
, ROUND(SUM(SHIP.SHIPPED_QUANTITY_GLOBAL),2) AS SHIPPED_QUANTITY_GLOBAL
, 'SSU' AS SHIPPED_QUANTITY_GLOBAL_UNIT_OF_MEASURE_CODE
, ROUND(SUM(SALE.TOTAL_ORDER_QUANTITY_LOCAL),2) AS TOTAL_ORDER_QUANTITY_LOCAL
, 'ESU' AS TOTAL_ORDER_QUANTITY_LOCAL_UNIT_OF_MEASURE_CODE
, ROUND(SUM(SALE.TOTAL_ORDER_QUANTITY_GLOBAL),2) AS TOTAL_ORDER_QUANTITY_GLOBAL
, 'SSU' AS TOTAL_ORDER_QUANTITY_GLOBAL_UNIT_OF_MEASURE_CODE
, 'A' AS ACTION_TYPE
, CURRENT_TIMESTAMP AS ROW_INSERT_TIMESTAMP
, CURRENT_TIMESTAMP AS ROW_UPDATE_TIMESTAMP
FROM CTE_AMT AMT
LEFT JOIN CTE_NET NET
ON AMT.SALES_ORDER_NUMBER = NET.SALES_ORDER_NUMBER
AND AMT.MATERIAL_NUMBER = NET.MATERIAL_NUMBER

LEFT JOIN CTE_SALE SALE
ON AMT.SALES_ORDER_NUMBER = SALE.ORDER_NUMBER
AND AMT.MATERIAL_NUMBER = SALE.MATERIAL_NUMBER

LEFT JOIN SHIP SHIP
ON AMT.SALES_ORDER_NUMBER = SHIP.ref_doc_nbr
AND AMT.MATERIAL_NUMBER = SHIP.mtrl_nbr

LEFT JOIN CTE_OOQ OOQ
ON AMT.SALES_ORDER_NUMBER = OOQ.sls_ord_nbr
AND AMT.MATERIAL_NUMBER = OOQ.mtrl_nbr

INNER JOIN MATERIAL_LIST MTRL
ON AMT.MATERIAL_NUMBER = MTRL.MATERIAL_NUMBER

LEFT JOIN `bcs-customer360-dev.staging_eu_west1.core_cust_sales_data` CUST_SLS_DATA --KNVV
ON AMT.SALES_ORGANIZATION_CODE = CUST_SLS_DATA.sls_org_cd
  AND AMT.DIVISION_CODE = CUST_SLS_DATA.div_cd
  AND AMT.SALES_DISTRICT_CODE = CUST_SLS_DATA.sls_district_cd
  --AND AMT.OPERATIONAL_ACCOUNT_IDENTIFIER_1 = CUST_SLS_DATA.cust_nbr --GAP TO BE FILLED

LEFT JOIN SQ_1_MAIN AS BS
ON 'GB' = BS.COUNTRY_CODE
  AND MTRL.PRODUCT_GROUP_NAME = BS.CROP_CODE
--  AND TO_DATE(YEAR(AMT.INVOICE_DATE) || '-' || SUBSTRING(AMT.INVOICE_DATE, 6, 2) || '-15') BETWEEN BS.OVERLAP_START AND BS.OVERLAP_END
LEFT JOIN CROP_SEASON SEAS
ON SEAS.COUNTRY_CODE = 'GB'
  AND SEAS.SEASON_TYPE = 'SELLING'
  AND SEAS.ACTION_TYPE <> 'D'
  AND BS.COUNTRY_CODE IS NULL
  AND MTRL.SPECIES_CODE = SEAS.CROP_CODE
  AND AMT.INVOICE_DATE BETWEEN SEAS.SEASON_START_DATE AND SEAS.SEASON_END_DATE
  AND SEAS.CLIENT_NUMBER = 430

LEFT JOIN (SELECT *
      FROM SQ_2_MAIN a
        WHERE a.RNK = 1) AS GGPPU
ON GGPPU.AVERAGE_GLOBAL_AMOUNT_SALES_UNIT_OF_MEASURE_CODE = 'SSU'
  AND GGPPU.AVERAGE_GLOBAL_AMOUNT_CURRENCY_CODE = 'EUR'
  AND GGPPU.CALENDAR_YEAR = extract(YEAR from AMT.INVOICE_DATE)
  AND UPPER(GGPPU.BUSINESS_GROUP_NAME) = 'SEEDS'
  AND UPPER(GGPPU.DIVISION_NAME) = 'ROW CROP'
  AND GGPPU.PRODUCT_BRAND_NAME_2 = UPPER(MTRL.PRODUCT_BRAND_NAME)
  AND GGPPU.PRODUCT_GROUP_NAME_2 = UPPER(MTRL.PRODUCT_GROUP_NAME)
  AND GGPPU.COUNTRY_CODE = 'GB'
LEFT JOIN(SELECT *
      FROM SQ_3_MAIN a
      WHERE a.RNK = 1) AS GGPPU_ALT
ON GGPPU_ALT.AVERAGE_GLOBAL_AMOUNT_SALES_UNIT_OF_MEASURE_CODE = 'SSU'
  AND GGPPU_ALT.AVERAGE_GLOBAL_AMOUNT_CURRENCY_CODE = 'EUR'
  AND GGPPU_ALT.CALENDAR_YEAR = extract (YEAR from AMT.INVOICE_DATE)
  AND UPPER(GGPPU_ALT.BUSINESS_GROUP_NAME) = 'SEEDS'
  AND UPPER(GGPPU_ALT.DIVISION_NAME) = 'ROW CROP'
  AND TRIM(GGPPU_ALT.PRODUCT_BRAND_NAME) = ''
  AND GGPPU_ALT.PRODUCT_GROUP_NAME_2 = UPPER(MTRL.PRODUCT_GROUP_NAME)
  AND GGPPU_ALT.COUNTRY_CODE = 'GB'
GROUP BY 
  extract (YEAR from AMT.INVOICE_DATE)
, AMT.INVOICE_DATE
, CUST_SLS_DATA.sls_grp_cd
, MATERIAL_NUMBER
, SEAS.CROP_YEAR
, SEAS.SEASON_CODE
, SEAS.SEASON_NAME
, NET.NET_SALES_QUANTITY_LOCAL
, AMT.NET_SALES_AMOUNT_LOCAL
, NET.NET_SALES_QUANTITY_GLOBAL
, AMT.GROSS_SALES_AMOUNT_LOCAL
, OPERATIONAL_ACCOUNT_IDENTIFIER_1_CLASSIFICATION_CODE
, MTRL.BUSINESS_GROUP_NAME
, MTRL.LINE_OF_BUSINESS_NAME
, MTRL.PRODUCT_GROUP_NAME
, MTRL.PRODUCT_BRAND_NAME
, MTRL.PRODUCT_NAME
, COALESCE(GGPPU.AVERAGE_GLOBAL_AMOUNT_CURRENCY_CODE,GGPPU_ALT.AVERAGE_GLOBAL_AMOUNT_CURRENCY_CODE)